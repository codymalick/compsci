Microsoft (R) Macro Assembler Version 11.00.60610.1	    07/23/14 14:22:25
Assignment3						(main.asm  Page 1 - 1


				TITLE Assignment3						(main.asm)

				; Author: Cody Malick
				; Course/Project ID: CS 271, Assignment 3
				; Date Created: 7/21/2014
				; Date Last Modified: 7/21/2014
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				;Text to be displayed throughout the program
 00000000 41 73 73 69 67	prog_title BYTE "Assignment3",0dh,0ah,0 
	   6E 6D 65 6E 74
	   33 0D 0A 00
 0000000E 43 6F 64 79 20	my_name BYTE "Cody Malick",0dh,0ah,0
	   4D 61 6C 69 63
	   6B 0D 0A 00
 0000001C 2A 2A 45 4E 44	term_mess BYTE "**END OF PROGRAM**",0dh,0ah,0
	   20 4F 46 20 50
	   52 4F 47 52 41
	   4D 2A 2A 0D 0A
	   00
 00000031 47 6F 6F 64 62	goodbye BYTE "Goodbye ",0
	   79 65 20 00
 0000003A 57 68 61 74 20	name_prompt BYTE "What is your name?",0dh,0ah,0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 0D 0A
	   00
 0000004F 48 65 6C 6C 6F	name_hello BYTE "Hello ",0
	   20 00
 00000056 21 0D 0A 00		exclaim BYTE "!",0dh,0ah,0
 0000005A 50 6C 65 61 73	prompt1 BYTE "Please enter a numbers between 0 and 100. The program will stop ",0dh,0ah,0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 30 20 61 6E
	   64 20 31 30 30
	   2E 20 54 68 65
	   20 70 72 6F 67
	   72 61 6D 20 77
	   69 6C 6C 20 73
	   74 6F 70 20 0D
	   0A 00
 0000009D 61 73 6B 69 6E	prompt2 BYTE "asking for input once you input a negative number. After that, the program will",0dh,0ah,0
	   67 20 66 6F 72
	   20 69 6E 70 75
	   74 20 6F 6E 63
	   65 20 79 6F 75
	   20 69 6E 70 75
	   74 20 61 20 6E
	   65 67 61 74 69
	   76 65 20 6E 75
	   6D 62 65 72 2E
	   20 41 66 74 65
	   72 20 74 68 61
	   74 2C 20 74 68
	   65 20 70 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 0D
	   0A 00
 000000EF 6F 75 74 70 75	prompt3 BYTE "output the following: # of entered values, sum of values entered, average",0dh,0ah,0
	   74 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   3A 20 23 20 6F
	   66 20 65 6E 74
	   65 72 65 64 20
	   76 61 6C 75 65
	   73 2C 20 73 75
	   6D 20 6F 66 20
	   76 61 6C 75 65
	   73 20 65 6E 74
	   65 72 65 64 2C
	   20 61 76 65 72
	   61 67 65 0D 0A
	   00
 0000013B 45 6E 74 65 72	prompt4 BYTE "Enter value between 0 and 100, negative number to end loop: ",0
	   20 76 61 6C 75
	   65 20 62 65 74
	   77 65 65 6E 20
	   30 20 61 6E 64
	   20 31 30 30 2C
	   20 6E 65 67 61
	   74 69 76 65 20
	   6E 75 6D 62 65
	   72 20 74 6F 20
	   65 6E 64 20 6C
	   6F 6F 70 3A 20
	   00
 00000178 56 61 6C 75 65	prompt5 BYTE "Value entered was too large!",0dh,0ah,0
	   20 65 6E 74 65
	   72 65 64 20 77
	   61 73 20 74 6F
	   6F 20 6C 61 72
	   67 65 21 0D 0A
	   00
 00000197 4E 75 6D 62 65	number_input BYTE "Number of values entered: ",0
	   72 20 6F 66 20
	   76 61 6C 75 65
	   73 20 65 6E 74
	   65 72 65 64 3A
	   20 00
 000001B2 53 75 6D 20 6F	sum_string BYTE "Sum of values entered: ",0
	   66 20 76 61 6C
	   75 65 73 20 65
	   6E 74 65 72 65
	   64 3A 20 00
 000001CA 41 76 65 72 61	av_string BYTE "Average of values entered: ",0
	   67 65 20 6F 66
	   20 76 61 6C 75
	   65 73 20 65 6E
	   74 65 72 65 64
	   3A 20 00

				;Integer Variables
 000001E6 00000000		user_in DWORD 0d
 000001EA 00000000		num_in DWORD 0d
 000001EE 00000000		sum_in DWORD 0d
 000001F2 00000000		av_in DWORD 0d
 000001F6 00000000		checker DWORD 0d

				;CONSTANTS
 = 0000001E			MAX = 30
 = 00000064			UP_LIM = 100
 = 00000000			LO_LIM = 0

				;String Arrays
 000001FA  0000001F [		u_name BYTE MAX+1 DUP (?)
	    00
	   ]

 00000000			.code

				;Handles the introduction section, displays instructions and prompts user for their name
 00000000			intro PROC
					
					;Get users name
 00000000  BA 0000003A R		mov edx,OFFSET name_prompt
 00000005  E8 00000000 E		call WriteString
 0000000A  BA 00000000			mov edx, 0
 0000000F  B8 00000000			mov eax, 0
 00000014  B9 00000000			mov ecx, 0
 00000019  BA 000001FA R		mov edx,OFFSET u_name
 0000001E  B9 0000001E			mov ecx, MAX
 00000023  E8 00000000 E		call ReadString

					;Great User
 00000028  BA 0000004F R		mov edx, offset name_hello
 0000002D  E8 00000000 E		call WriteString
 00000032  BA 000001FA R		mov edx, offset u_name
 00000037  E8 00000000 E		call WriteString
 0000003C  BA 00000056 R		mov edx, offset exclaim
 00000041  E8 00000000 E		call WriteString

					;instructions
 00000046  BA 0000005A R		mov edx, offset prompt1
 0000004B  E8 00000000 E		call WriteString
 00000050  BA 0000009D R		mov edx, offset prompt2
 00000055  E8 00000000 E		call WriteString
 0000005A  BA 000000EF R		mov edx, offset prompt3
 0000005F  E8 00000000 E		call WriteString
 00000064  E8 00000000 E		call Crlf
 00000069  C3				ret
 0000006A			intro ENDP


				;checks whether or not a number entered is valid, and sets the checker Variable
 0000006A			valid PROC
 0000006A  C7 05 000001F6 R		mov checker, 0
	   00000000
 00000074  B8 00000000			mov eax, 0
 00000079  83 3D 000001E6 R		cmp user_in, UP_LIM
	   64
 00000080  7F 0B			jg big
 00000082  83 3D 000001E6 R		cmp user_in, LO_LIM
	   00
 00000089  7C 0E			jl small
 0000008B  EB 18			jmp correct
				;number is too big, set checker to +1
 0000008D			big:
 0000008D  C7 05 000001F6 R		mov checker, 1
	   00000001
 00000097  EB 1D			jmp last
				;number is negative, set checker to -1
 00000099			small:
 00000099  C7 05 000001F6 R		mov checker, -1
	   FFFFFFFF
 000000A3  EB 11			jmp last
				;number is between 0 and 100, checker is 0
 000000A5			correct:
 000000A5  A1 000001E6 R		mov eax, user_in
 000000AA  01 05 000001EE R		add sum_in, eax
 000000B0  FF 05 000001EA R		inc num_in
 000000B6			last:
 000000B6  C3				ret
 000000B7			valid ENDP

				;gets users integer input
 000000B7			get_int PROC
 000000B7  55				push ebp
 000000B8  8B EC			mov ebp, esp
 000000BA  B8 00000000			mov eax, 0
 000000BF  BA 00000000			mov edx, 0
 000000C4  BA 0000013B R		mov edx, offset prompt4
 000000C9  E8 00000000 E		call WriteString

 000000CE  E8 00000000 E		call ReadInt
 000000D3  A3 000001E6 R		mov user_in, eax

 000000D8  5D				pop ebp
 000000D9  C3				ret
 000000DA			get_int ENDP

				;prints out all the required information, average, number entered, sum of all values
 000000DA			end_program PROC
 000000DA  55				push ebp
 000000DB  8B EC			mov ebp, esp

					;number of values entered
 000000DD  B8 00000000			mov eax, 0
 000000E2  BA 00000000			mov edx, 0
 000000E7  A1 000001EA R		mov eax, num_in
 000000EC  BA 00000197 R		mov edx, offset number_input
 000000F1  E8 00000000 E		call WriteString
 000000F6  E8 00000000 E		call WriteInt
 000000FB  E8 00000000 E		call Crlf

					;sum of values entered
 00000100  B8 00000000			mov eax, 0
 00000105  BA 00000000			mov edx, 0
 0000010A  A1 000001EE R		mov eax, sum_in
 0000010F  BA 000001B2 R		mov edx, offset sum_string
 00000114  E8 00000000 E		call WriteString
 00000119  E8 00000000 E		call WriteInt
 0000011E  E8 00000000 E		call Crlf

					;average of values entered
 00000123  BA 00000000			mov edx, 0
 00000128  B8 00000000			mov eax, 0
 0000012D  BB 00000000			mov ebx, 0

 00000132  A1 000001EE R		mov eax, sum_in
 00000137  F7 35 000001EA R		div num_in
 0000013D  A3 000001F2 R		mov av_in, eax

 00000142  BA 00000000			mov edx, 0
 00000147  BB 00000000			mov ebx, 0

 0000014C  BA 000001CA R		mov edx, offset av_string
 00000151  E8 00000000 E		call WriteString
 00000156  E8 00000000 E		call WriteInt
 0000015B  E8 00000000 E		call Crlf

 00000160  5D				pop ebp
 00000161  C3				ret
 00000162			end_program ENDP



 00000162			main PROC
 00000162  E8 00000000 E		call Clrscr
					;This would only have a use, it seems, when there is something coming before this program is executed.
 00000167  BA 0000000E R		mov edx,OFFSET my_name
 0000016C  E8 00000000 E		call WriteString

 00000171  BA 00000000 R		mov	 edx,OFFSET prog_title
 00000176  E8 00000000 E		call WriteString
 0000017B  E8 00000000 E		call Crlf
					
					;clear general use registers
 00000180  B8 00000000			mov eax, 0
 00000185  BB 00000000			mov ebx, 0
 0000018A  B9 00000000			mov ecx, 0
 0000018F  BA 00000000			mov edx, 0

 00000194  60				pusha
 00000195  E8 FFFFFE66			call intro
 0000019A  61				popa

 0000019B			input:

					;clear general use registers
 0000019B  B8 00000000			mov eax, 0
 000001A0  BB 00000000			mov ebx, 0
 000001A5  B9 00000000			mov ecx, 0
 000001AA  BA 00000000			mov edx, 0
					
					;get user input
 000001AF  E8 FFFFFF03			call get_int

					;check to see if it's valid and check for negative input
 000001B4  E8 FFFFFEB1			call valid

					;depending on checker value, jump to apropriate label
 000001B9  A1 000001F6 R		mov eax, checker
 000001BE  83 F8 00			cmp eax, 0
 000001C1  7C 13			jl end_input
 000001C3  83 F8 00			cmp eax, 0
 000001C6  7F 02			jg b_input
 000001C8  EB D1			jmp input

				;if the value is over 100
 000001CA			b_input:
 000001CA  BA 00000178 R		mov edx, offset prompt5
 000001CF  E8 00000000 E		call WriteString
 000001D4  EB C5			jmp input

				;if the value is negative
 000001D6			end_input:
					
 000001D6  E8 00000000 E		call Crlf
					;print out the required variables
 000001DB  E8 FFFFFEFA			call end_program

					;say goodbye to the user
 000001E0  BA 00000031 R		mov edx, offset goodbye
 000001E5  E8 00000000 E		call WriteString
 000001EA  BA 000001FA R		mov edx, offset u_name
 000001EF  E8 00000000 E		call WriteString
 000001F4  BA 00000056 R		mov edx, offset exclaim
 000001F9  E8 00000000 E		call WriteString

 000001FE  E8 00000000 E		call Crlf

				exit
 0000020A			main ENDP

				END main
Microsoft (R) Macro Assembler Version 11.00.60610.1	    07/23/14 14:22:25
Assignment3						(main.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000219 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000020A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
end_program  . . . . . . . . . .	P Near	 000000DA _TEXT	Length= 00000088 Public STDCALL
get_int  . . . . . . . . . . . .	P Near	 000000B7 _TEXT	Length= 00000023 Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006A Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000162 _TEXT	Length= 000000A8 Public STDCALL
  input  . . . . . . . . . . . .	L Near	 0000019B _TEXT	
  b_input  . . . . . . . . . . .	L Near	 000001CA _TEXT	
  end_input  . . . . . . . . . .	L Near	 000001D6 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
valid  . . . . . . . . . . . . .	P Near	 0000006A _TEXT	Length= 0000004D Public STDCALL
  big  . . . . . . . . . . . . .	L Near	 0000008D _TEXT	
  small  . . . . . . . . . . . .	L Near	 00000099 _TEXT	
  correct  . . . . . . . . . . .	L Near	 000000A5 _TEXT	
  last . . . . . . . . . . . . .	L Near	 000000B6 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_LIM . . . . . . . . . . . . .	Number	 00000000h   
MAX  . . . . . . . . . . . . . .	Number	 0000001Eh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UP_LIM . . . . . . . . . . . . .	Number	 00000064h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
av_in  . . . . . . . . . . . . .	DWord	 000001F2 _DATA	
av_string  . . . . . . . . . . .	Byte	 000001CA _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
checker  . . . . . . . . . . . .	DWord	 000001F6 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exclaim  . . . . . . . . . . . .	Byte	 00000056 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000031 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
my_name  . . . . . . . . . . . .	Byte	 0000000E _DATA	
name_hello . . . . . . . . . . .	Byte	 0000004F _DATA	
name_prompt  . . . . . . . . . .	Byte	 0000003A _DATA	
num_in . . . . . . . . . . . . .	DWord	 000001EA _DATA	
number_input . . . . . . . . . .	Byte	 00000197 _DATA	
prog_title . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 0000005A _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000009D _DATA	
prompt3  . . . . . . . . . . . .	Byte	 000000EF _DATA	
prompt4  . . . . . . . . . . . .	Byte	 0000013B _DATA	
prompt5  . . . . . . . . . . . .	Byte	 00000178 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_in . . . . . . . . . . . . .	DWord	 000001EE _DATA	
sum_string . . . . . . . . . . .	Byte	 000001B2 _DATA	
term_mess  . . . . . . . . . . .	Byte	 0000001C _DATA	
u_name . . . . . . . . . . . . .	Byte	 000001FA _DATA	
user_in  . . . . . . . . . . . .	DWord	 000001E6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
