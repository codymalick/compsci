From 036de26a6481075a751ddac0c890521f0671409a Mon Sep 17 00:00:00 2001
From: codymalick <cody.malick@gmail.com>
Date: Tue, 26 Apr 2016 21:20:38 -0700
Subject: [PATCH 1/4] added files to rebase

---
 block/sstf-iosched.c | 186 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 186 insertions(+)
 create mode 100644 block/sstf-iosched.c

diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100644
index 0000000..f00659a
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,186 @@
+/*
+ * SSTF IO Scheduler
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+struct sstf_data {
+	struct list_head queue;
+};
+
+/*
+ * This function deletes merged requests
+ */
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+/*
+ * Find the end sector of the request
+ * Looking forward and backward for closest request
+ */
+int distance(struct request *rq, struct request *rq2) {
+	/* distance from current request */
+	int dist;
+	sector_t sector = blk_rq_pos(rq);
+	sector_t sector2 = blk_rq_pos(rq2);
+
+	/*estimates the total distance*/
+	if(sector2 >= sector) {
+		dist = sector2 - sector;
+	} else {
+		dist = sector - sector2;
+	}
+	
+	return dist;
+}
+
+/*
+ * This function actually adds a request to the dispatch queue
+ */
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *nd;
+	nd = q->elevator->elevator_data;
+
+	if(!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+		printk(KERN_DEBUG "Dispatching...");
+		return 1;
+	}
+	return 0;
+}
+
+/*
+ * Insertion sort when adding a request
+ */
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	printk(KERN_DEBUG "add_request called\n");
+	struct sstf_data *nd;
+        nd = q->elevator->elevator_data;
+	int dist;
+	int last_dist = -1;
+	/* Insert at the point where the difference in sectors is least */
+	if (!list_empty(&nd->queue)) {
+		struct request *nrq;
+		list_for_each_entry(nrq, &nd->queue, queuelist) {
+			dist = distance(rq, nrq);
+			printk(KERN_DEBUG "Dist = %i\n", dist);
+			if(!list_is_singular(&nd->queue) || dist <= last_dist) {
+				last_dist = dist;
+			} else {
+				list_add(&rq->queuelist, &nrq->queuelist);
+				return;
+				printk(KERN_DEBUG "This shouldn't print\n");
+			}
+		}
+	}
+	printk(KERN_DEBUG "Added to empty queue\n");	
+	list_add_tail(&rq->queuelist, &nd->queue);
+}
+
+
+
+/*
+ * 
+ */
+static struct request * sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	/*printk(KERN_DEBUG "former_request called\n");*/
+
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	/*printk(KERN_DEBUG "latter_request called\n");*/
+
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	
+
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	/*printk(KERN_DEBUG "exit_queue called\n");*/
+
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+		/*.elevator_merge_fn		= sstf_merge_requests,*/
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Cody Malick");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("SSTF IO scheduler, based off Linux noop scheduler");
-- 
1.7.12.4


From 9f83e0881072689d698b583685b90ada0f8552ed Mon Sep 17 00:00:00 2001
From: codymalick <cody.malick@gmail.com>
Date: Wed, 27 Apr 2016 09:35:29 -0700
Subject: [PATCH 2/4] fixed if-else, updated .gitignore

---
 .gitignore            | 2 +-
 block/Kconfig.iosched | 9 +++++++++
 block/Makefile        | 1 +
 block/sstf-iosched.c  | 7 ++++---
 4 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/.gitignore b/.gitignore
index 42fa0d5..afe9073 100644
--- a/.gitignore
+++ b/.gitignore
@@ -50,7 +50,7 @@ modules.builtin
 # Debian directory (make deb-pkg)
 #
 /debian/
-
+vmfiles/
 #
 # git files that we don't want to ignore even it they are dot-files
 #
diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..fc49325 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -32,6 +32,11 @@ config IOSCHED_CFQ
 
 	  This is the default I/O scheduler.
 
+config IOSCHED_SSTF
+	tristate "SSTF I/O scheduler"
+	---help---
+	  This will be filled in later
+
 config CFQ_GROUP_IOSCHED
 	bool "CFQ Group Scheduling support"
 	depends on IOSCHED_CFQ && BLK_CGROUP
@@ -52,6 +57,9 @@ choice
 	config DEFAULT_CFQ
 		bool "CFQ" if IOSCHED_CFQ=y
 
+	config DEFAULT_SSTF
+		bool "SSTF" if IOSCHED_SSTF=y
+
 	config DEFAULT_NOOP
 		bool "No-op"
 
@@ -62,6 +70,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 20645e8..4b323fe 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
index f00659a..ee30b08 100644
--- a/block/sstf-iosched.c
+++ b/block/sstf-iosched.c
@@ -79,13 +79,14 @@ static void sstf_add_request(struct request_queue *q, struct request *rq)
 				last_dist = dist;
 			} else {
 				list_add(&rq->queuelist, &nrq->queuelist);
-				return;
+				break;
 				printk(KERN_DEBUG "This shouldn't print\n");
 			}
 		}
+	} else {
+		printk(KERN_DEBUG "Added to empty queue\n");	
+		list_add_tail(&rq->queuelist, &nd->queue);
 	}
-	printk(KERN_DEBUG "Added to empty queue\n");	
-	list_add_tail(&rq->queuelist, &nd->queue);
 }
 
 
-- 
1.7.12.4


From c583bf92b5505c7b9f78548a3b8fee5e28577b28 Mon Sep 17 00:00:00 2001
From: codymalick <cody.malick@gmail.com>
Date: Wed, 27 Apr 2016 12:04:32 -0700
Subject: [PATCH 3/4] Added merging

---
 block/sstf-iosched.c | 29 +++++++++++++++++++++--------
 1 file changed, 21 insertions(+), 8 deletions(-)

diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
index ee30b08..6ce917d 100644
--- a/block/sstf-iosched.c
+++ b/block/sstf-iosched.c
@@ -74,23 +74,36 @@ static void sstf_add_request(struct request_queue *q, struct request *rq)
 		struct request *nrq;
 		list_for_each_entry(nrq, &nd->queue, queuelist) {
 			dist = distance(rq, nrq);
-			printk(KERN_DEBUG "Dist = %i\n", dist);
+			printk(KERN_DEBUG "Sector Location: %lu\n",
+					(unsigned long int)blk_rq_pos(nrq)); 
+
+			/*
+			 *  Merge if the distance == 1, adjacent,
+			 *  default front merge 
+			 */
+			if(dist == 1) {
+				elv_merge_requests(q, rq, nrq);
+				printk("Merged two requests");
+				/* Break out of func so we don't add again */
+				return;
+			}
+
 			if(!list_is_singular(&nd->queue) || dist <= last_dist) {
 				last_dist = dist;
 			} else {
 				list_add(&rq->queuelist, &nrq->queuelist);
-				break;
-				printk(KERN_DEBUG "This shouldn't print\n");
+				printk(KERN_DEBUG "%lu added behind %lu\n",
+						(unsigned long int)blk_rq_pos(nrq),
+					       	(unsigned long int)blk_rq_pos(rq));
+				return;
 			}
 		}
-	} else {
-		printk(KERN_DEBUG "Added to empty queue\n");	
-		list_add_tail(&rq->queuelist, &nd->queue);
 	}
+	printk(KERN_DEBUG "Added %lu to tail\n", (unsigned long int)blk_rq_pos(rq));	
+	list_add_tail(&rq->queuelist, &nd->queue);
+	
 }
 
-
-
 /*
  * 
  */
-- 
1.7.12.4


From 18a64c0ee9976d89e427f64412ac9dd56a831e7f Mon Sep 17 00:00:00 2001
From: codymalick <cody.malick@gmail.com>
Date: Wed, 27 Apr 2016 19:30:58 -0700
Subject: [PATCH 4/4] fixed sorting

---
 block/sstf-iosched.c | 100 ++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 72 insertions(+), 28 deletions(-)

diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
index 6ce917d..584fe3a 100644
--- a/block/sstf-iosched.c
+++ b/block/sstf-iosched.c
@@ -7,6 +7,7 @@
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/init.h>
+
 struct sstf_data {
 	struct list_head queue;
 };
@@ -24,19 +25,21 @@ static void sstf_merged_requests(struct request_queue *q, struct request *rq,
  * Find the end sector of the request
  * Looking forward and backward for closest request
  */
-int distance(struct request *rq, struct request *rq2) {
+int distance(struct request *rq, struct request *rq2)
+{
 	/* distance from current request */
 	int dist;
 	sector_t sector = blk_rq_pos(rq);
 	sector_t sector2 = blk_rq_pos(rq2);
 
-	/*estimates the total distance*/
+	dist = sector2 - sector;
+	/*estimates the total distance
 	if(sector2 >= sector) {
 		dist = sector2 - sector;
 	} else {
 		dist = sector - sector2;
 	}
-	
+	*/
 	return dist;
 }
 
@@ -68,40 +71,83 @@ static void sstf_add_request(struct request_queue *q, struct request *rq)
 	struct sstf_data *nd;
         nd = q->elevator->elevator_data;
 	int dist;
-	int last_dist = -1;
+	int last_dist = distance(rq, list_entry(nd->queue.next, struct request, queuelist));
+	int before_after = 0;
+	if(last_dist < 0) {
+		before_after = -1;
+	} else {
+		before_after = 1;
+	}
 	/* Insert at the point where the difference in sectors is least */
 	if (!list_empty(&nd->queue)) {
 		struct request *nrq;
-		list_for_each_entry(nrq, &nd->queue, queuelist) {
-			dist = distance(rq, nrq);
-			printk(KERN_DEBUG "Sector Location: %lu\n",
+		if(before_after == 1) {
+			printk(KERN_DEBUG "Forward\n");
+			list_for_each_entry(nrq, &nd->queue, queuelist) {
+				/* if negative put on back of list, else search front */
+				dist = distance(rq, nrq);
+				printk(KERN_DEBUG "Sector Location: %lu\n",
 					(unsigned long int)blk_rq_pos(nrq)); 
 
-			/*
-			 *  Merge if the distance == 1, adjacent,
-			 *  default front merge 
-			 */
-			if(dist == 1) {
-				elv_merge_requests(q, rq, nrq);
-				printk("Merged two requests");
-				/* Break out of func so we don't add again */
-				return;
+				/*
+			 	*  Merge if the distance == 1, adjacent,
+			 	*  default front merge 
+			 	*/
+				if(dist == 1 || dist == -1) {
+					elv_merge_requests(q, rq, nrq);
+					printk("Merged two requests");
+					/* Break out of func so we don't add again */
+					return;
+				}
+				if(dist <= last_dist) {
+					last_dist = dist;
+				} else {
+					list_add(&rq->queuelist, &nrq->queuelist);
+					printk(KERN_DEBUG "%lu added behind %lu\n",
+						(unsigned long int)blk_rq_pos(nrq),
+					       	(unsigned long int)blk_rq_pos(rq));
+					return;
+				}	
 			}
-
-			if(!list_is_singular(&nd->queue) || dist <= last_dist) {
-				last_dist = dist;
-			} else {
-				list_add(&rq->queuelist, &nrq->queuelist);
-				printk(KERN_DEBUG "%lu added behind %lu\n",
+		
+		} else {
+			printk(KERN_DEBUG "reverse\n");
+			list_for_each_entry_reverse(nrq, &nd->queue, queuelist) {
+				/* if negative put on back of list, else search front */
+				dist = distance(rq, nrq);
+				printk(KERN_DEBUG "Sector Location: %lu\n",
+				(unsigned long int)blk_rq_pos(nrq)); 
+
+				/*
+			 	*  Merge if the distance == 1, adjacent,
+			 	*  default front merge 
+			 	*/
+				if(dist == 1 || dist == -1) {
+					elv_merge_requests(q, rq, nrq);
+					printk("Merged two requests");
+					/* Break out of func so we don't add again */
+					return;
+				}
+				/* if last distance was negative, add before */
+				if(last_dist < 0 ) {
+					list_add_tail(&rq->queuelist, &nrq->queuelist);
+					return;
+				}
+				if(dist <= last_dist) {
+					last_dist = dist;
+				} else {
+					list_add_tail(&rq->queuelist, &nrq->queuelist);
+					printk(KERN_DEBUG "%lu added before %lu\n",
 						(unsigned long int)blk_rq_pos(nrq),
 					       	(unsigned long int)blk_rq_pos(rq));
-				return;
+					return;
+				}	
 			}
 		}
 	}
-	printk(KERN_DEBUG "Added %lu to tail\n", (unsigned long int)blk_rq_pos(rq));	
-	list_add_tail(&rq->queuelist, &nd->queue);
-	
+	printk(KERN_DEBUG "Added %lu to tail\n",
+		       	(unsigned long int)blk_rq_pos(rq));	
+	list_add_tail(&rq->queuelist, &nd->queue);	
 }
 
 /*
@@ -133,8 +179,6 @@ sstf_latter_request(struct request_queue *q, struct request *rq)
 static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
 {
 	struct sstf_data *nd;
-	
-
 	struct elevator_queue *eq;
 
 	eq = elevator_alloc(q, e);
-- 
1.7.12.4

